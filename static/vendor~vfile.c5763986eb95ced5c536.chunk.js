"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[99],{54251:(t,e,n)=>{n.d(e,{k:()=>f});var i=n(10821),r=n(17325);const s={basename:function(t,e){if(void 0!==e&&"string"!=typeof e)throw new TypeError('"ext" argument must be a string');o(t);let n,i=0,r=-1,s=t.length;if(void 0===e||0===e.length||e.length>t.length){for(;s--;)if(47===t.charCodeAt(s)){if(n){i=s+1;break}}else r<0&&(n=!0,r=s+1);return r<0?"":t.slice(i,r)}if(e===t)return"";let h=-1,a=e.length-1;for(;s--;)if(47===t.charCodeAt(s)){if(n){i=s+1;break}}else h<0&&(n=!0,h=s+1),a>-1&&(t.charCodeAt(s)===e.charCodeAt(a--)?a<0&&(r=s):(a=-1,r=h));i===r?r=h:r<0&&(r=t.length);return t.slice(i,r)},dirname:function(t){if(o(t),0===t.length)return".";let e,n=-1,i=t.length;for(;--i;)if(47===t.charCodeAt(i)){if(e){n=i;break}}else e||(e=!0);return n<0?47===t.charCodeAt(0)?"/":".":1===n&&47===t.charCodeAt(0)?"//":t.slice(0,n)},extname:function(t){o(t);let e,n=t.length,i=-1,r=0,s=-1,h=0;for(;n--;){const o=t.charCodeAt(n);if(47!==o)i<0&&(e=!0,i=n+1),46===o?s<0?s=n:1!==h&&(h=1):s>-1&&(h=-1);else if(e){r=n+1;break}}if(s<0||i<0||0===h||1===h&&s===i-1&&s===r+1)return"";return t.slice(s,i)},join:function(...t){let e,n=-1;for(;++n<t.length;)o(t[n]),t[n]&&(e=void 0===e?t[n]:e+"/"+t[n]);return void 0===e?".":function(t){o(t);const e=47===t.charCodeAt(0);let n=function(t,e){let n,i,r="",s=0,o=-1,h=0,a=-1;for(;++a<=t.length;){if(a<t.length)n=t.charCodeAt(a);else{if(47===n)break;n=47}if(47===n){if(o===a-1||1===h);else if(o!==a-1&&2===h){if(r.length<2||2!==s||46!==r.charCodeAt(r.length-1)||46!==r.charCodeAt(r.length-2))if(r.length>2){if(i=r.lastIndexOf("/"),i!==r.length-1){i<0?(r="",s=0):(r=r.slice(0,i),s=r.length-1-r.lastIndexOf("/")),o=a,h=0;continue}}else if(r.length>0){r="",s=0,o=a,h=0;continue}e&&(r=r.length>0?r+"/..":"..",s=2)}else r.length>0?r+="/"+t.slice(o+1,a):r=t.slice(o+1,a),s=a-o-1;o=a,h=0}else 46===n&&h>-1?h++:h=-1}return r}(t,!e);0!==n.length||e||(n=".");n.length>0&&47===t.charCodeAt(t.length-1)&&(n+="/");return e?"/"+n:n}(e)},sep:"/"};function o(t){if("string"!=typeof t)throw new TypeError("Path must be a string. Received "+JSON.stringify(t))}const h={cwd:function(){return"/"}};function a(t){return null!==t&&"object"==typeof t&&t.href&&t.origin}function c(t){if("string"==typeof t)t=new URL(t);else if(!a(t)){const e=new TypeError('The "path" argument must be of type string or an instance of URL. Received `'+t+"`");throw e.code="ERR_INVALID_ARG_TYPE",e}if("file:"!==t.protocol){const t=new TypeError("The URL must be of scheme file");throw t.code="ERR_INVALID_URL_SCHEME",t}return function(t){if(""!==t.hostname){const t=new TypeError('File URL host must be "localhost" or empty on darwin');throw t.code="ERR_INVALID_FILE_URL_HOST",t}const e=t.pathname;let n=-1;for(;++n<e.length;)if(37===e.charCodeAt(n)&&50===e.charCodeAt(n+1)){const t=e.charCodeAt(n+2);if(70===t||102===t){const t=new TypeError("File URL path must not include encoded / characters");throw t.code="ERR_INVALID_FILE_URL_PATH",t}}return decodeURIComponent(e)}(t)}const l=["history","path","basename","stem","extname","dirname"];class f{constructor(t){let e;e=t?"string"==typeof t||i(t)?{value:t}:a(t)?{path:t}:t:{},this.data={},this.messages=[],this.history=[],this.cwd=h.cwd(),this.value,this.stored,this.result,this.map;let n,r=-1;for(;++r<l.length;){const t=l[r];t in e&&void 0!==e[t]&&(this[t]="history"===t?[...e[t]]:e[t])}for(n in e)l.includes(n)||(this[n]=e[n])}get path(){return this.history[this.history.length-1]}set path(t){a(t)&&(t=c(t)),d(t,"path"),this.path!==t&&this.history.push(t)}get dirname(){return"string"==typeof this.path?s.dirname(this.path):void 0}set dirname(t){m(this.basename,"dirname"),this.path=s.join(t||"",this.basename)}get basename(){return"string"==typeof this.path?s.basename(this.path):void 0}set basename(t){d(t,"basename"),u(t,"basename"),this.path=s.join(this.dirname||"",t)}get extname(){return"string"==typeof this.path?s.extname(this.path):void 0}set extname(t){if(u(t,"extname"),m(this.dirname,"extname"),t){if(46!==t.charCodeAt(0))throw new Error("`extname` must start with `.`");if(t.includes(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=s.join(this.dirname,this.stem+(t||""))}get stem(){return"string"==typeof this.path?s.basename(this.path,this.extname):void 0}set stem(t){d(t,"stem"),u(t,"stem"),this.path=s.join(this.dirname||"",t+(this.extname||""))}toString(t){return(this.value||"").toString(t)}message(t,e,n){const i=new r.$(t,e,n);return this.path&&(i.name=this.path+":"+i.name,i.file=this.path),i.fatal=!1,this.messages.push(i),i}info(t,e,n){const i=this.message(t,e,n);return i.fatal=null,i}fail(t,e,n){const i=this.message(t,e,n);throw i.fatal=!0,i}}function u(t,e){if(t&&t.includes(s.sep))throw new Error("`"+e+"` cannot be a path: did not expect `"+s.sep+"`")}function d(t,e){if(!t)throw new Error("`"+e+"` cannot be empty")}function m(t,e){if(!t)throw new Error("Setting `"+e+"` requires `path` to be set too")}}}]);